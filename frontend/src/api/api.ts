/* tslint:disable */
/* eslint-disable */
/**
 * API Reparo360
 * Documentação interativa dos endpoints da aplicação Reparo360
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Dados de um agendamento de serviço
 * @export
 * @interface AgendamentoDTO
 */
export interface AgendamentoDTO {
    /**
     * Identificador do agendamento
     * @type {number}
     * @memberof AgendamentoDTO
     */
    'id'?: number;
    /**
     * Nome completo do cliente
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'nomeCliente': string;
    /**
     * E-mail do cliente
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'email': string;
    /**
     * Telefone de contato do cliente
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'telefone': string;
    /**
     * ID do cliente
     * @type {number}
     * @memberof AgendamentoDTO
     */
    'clienteId': number;
    /**
     * ID do técnico responsável
     * @type {number}
     * @memberof AgendamentoDTO
     */
    'tecnicoId': number;
    /**
     * Data e hora planejadas para o serviço
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'dataAgendamento': string;
    /**
     * Lista de IDs de serviços solicitados
     * @type {Array<number>}
     * @memberof AgendamentoDTO
     */
    'servicosId': Array<number>;
    /**
     * Observações adicionais sobre o agendamento
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'observacoes'?: string;
    /**
     * Status atual do agendamento
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'status': string;
    /**
     * Logradouro do local do serviço
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'logradouro': string;
    /**
     * Número do imóvel
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'numero'?: string;
    /**
     * Complemento do endereço
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'complemento'?: string;
    /**
     * Bairro do endereço
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'bairro': string;
    /**
     * Cidade do endereço
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'cidade': string;
    /**
     * Unidade Federativa (estado)
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'uf': string;
    /**
     * CEP do endereço
     * @type {string}
     * @memberof AgendamentoDTO
     */
    'cep': string;
}
/**
 * Dados de apuração financeira de um serviço
 * @export
 * @interface ApuracaoServicoDTO
 */
export interface ApuracaoServicoDTO {
    /**
     * Identificador da apuração
     * @type {number}
     * @memberof ApuracaoServicoDTO
     */
    'id'?: number;
    /**
     * ID da Ordem de Serviço associada
     * @type {number}
     * @memberof ApuracaoServicoDTO
     */
    'ordemServicoId': number;
    /**
     * Valor total cobrado pelo serviço
     * @type {number}
     * @memberof ApuracaoServicoDTO
     */
    'valorServico': number;
    /**
     * Valor total dos materiais utilizados
     * @type {number}
     * @memberof ApuracaoServicoDTO
     */
    'valorMateriais': number;
    /**
     * Quilometragem de deslocamento para o serviço
     * @type {number}
     * @memberof ApuracaoServicoDTO
     */
    'kmDeslocamento': number;
    /**
     * Receita líquida após custos
     * @type {number}
     * @memberof ApuracaoServicoDTO
     */
    'receitaLiquida': number;
    /**
     * Data e hora em que a apuração foi realizada
     * @type {string}
     * @memberof ApuracaoServicoDTO
     */
    'dataApuracao': string;
}
/**
 * Dados de uma categoria financeira
 * @export
 * @interface CategoriaFinanceiraDTO
 */
export interface CategoriaFinanceiraDTO {
    /**
     * Identificador da categoria
     * @type {number}
     * @memberof CategoriaFinanceiraDTO
     */
    'id'?: number;
    /**
     * Nome da categoria financeira
     * @type {string}
     * @memberof CategoriaFinanceiraDTO
     */
    'nome': string;
    /**
     * Descrição opcional da categoria
     * @type {string}
     * @memberof CategoriaFinanceiraDTO
     */
    'descricao'?: string;
}
/**
 * Dados de um cliente
 * @export
 * @interface ClienteDTO
 */
export interface ClienteDTO {
    /**
     * Identificador do cliente
     * @type {number}
     * @memberof ClienteDTO
     */
    'idCliente'?: number;
    /**
     * Nome completo do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'nome': string;
    /**
     * E-mail do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'email': string;
    /**
     * Telefone de contato do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'telefone': string;
    /**
     * Logradouro (rua, avenida etc.)
     * @type {string}
     * @memberof ClienteDTO
     */
    'logradouro': string;
    /**
     * Número do endereço
     * @type {string}
     * @memberof ClienteDTO
     */
    'numero': string;
    /**
     * Complemento do endereço
     * @type {string}
     * @memberof ClienteDTO
     */
    'complemento'?: string;
    /**
     * Bairro do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'bairro': string;
    /**
     * Cidade do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'cidade': string;
    /**
     * Sigla da UF (2 caracteres)
     * @type {string}
     * @memberof ClienteDTO
     */
    'uf': string;
    /**
     * CEP do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'cep': string;
    /**
     * Data de cadastro do cliente
     * @type {string}
     * @memberof ClienteDTO
     */
    'dataCadastro'?: string;
    /**
     * Origem do cadastro do cliente (p. ex., WEB, APP)
     * @type {string}
     * @memberof ClienteDTO
     */
    'origem'?: string;
}
/**
 * Dados de uma conta caixa
 * @export
 * @interface ContaCaixaDTO
 */
export interface ContaCaixaDTO {
    /**
     * Identificador da conta caixa
     * @type {number}
     * @memberof ContaCaixaDTO
     */
    'id'?: number;
    /**
     * Nome da conta caixa
     * @type {string}
     * @memberof ContaCaixaDTO
     */
    'nome': string;
    /**
     * Saldo inicial da conta caixa
     * @type {number}
     * @memberof ContaCaixaDTO
     */
    'saldoInicial': number;
}
/**
 * Dados de um lançamento financeiro
 * @export
 * @interface LancamentoFinanceiroDTO
 */
export interface LancamentoFinanceiroDTO {
    /**
     * Identificador do lançamento
     * @type {number}
     * @memberof LancamentoFinanceiroDTO
     */
    'id'?: number;
    /**
     * ID da conta caixa associada
     * @type {number}
     * @memberof LancamentoFinanceiroDTO
     */
    'contaCaixaId': number;
    /**
     * ID da categoria financeira associada
     * @type {number}
     * @memberof LancamentoFinanceiroDTO
     */
    'categoriaFinanceiraId': number;
    /**
     * Valor do lançamento
     * @type {number}
     * @memberof LancamentoFinanceiroDTO
     */
    'valor': number;
    /**
     * Data e hora do lançamento
     * @type {string}
     * @memberof LancamentoFinanceiroDTO
     */
    'dataLancamento'?: string;
    /**
     * Tipo de transação (RECEITA ou DESPESA)
     * @type {string}
     * @memberof LancamentoFinanceiroDTO
     */
    'tipoTransacao': string;
    /**
     * Descrição complementar do lançamento
     * @type {string}
     * @memberof LancamentoFinanceiroDTO
     */
    'descricao'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * Dados de uma movimentação de estoque
 * @export
 * @interface MovimentacaoEstoqueDTO
 */
export interface MovimentacaoEstoqueDTO {
    /**
     * Identificador da movimentação de estoque
     * @type {number}
     * @memberof MovimentacaoEstoqueDTO
     */
    'id'?: number;
    /**
     * ID do produto movimentado
     * @type {number}
     * @memberof MovimentacaoEstoqueDTO
     */
    'produtoId': number;
    /**
     * Tipo de movimentação (ENTRADA ou SAÍDA)
     * @type {string}
     * @memberof MovimentacaoEstoqueDTO
     */
    'tipo': MovimentacaoEstoqueDTOTipoEnum;
    /**
     * Quantidade de itens movimentados
     * @type {number}
     * @memberof MovimentacaoEstoqueDTO
     */
    'quantidade': number;
    /**
     * Data e hora da movimentação
     * @type {string}
     * @memberof MovimentacaoEstoqueDTO
     */
    'dataMovimentacao': string;
    /**
     * Descrição opcional sobre a movimentação
     * @type {string}
     * @memberof MovimentacaoEstoqueDTO
     */
    'descricao'?: string;
}

export const MovimentacaoEstoqueDTOTipoEnum = {
    Entrada: 'ENTRADA',
    Saida: 'SAIDA'
} as const;

export type MovimentacaoEstoqueDTOTipoEnum = typeof MovimentacaoEstoqueDTOTipoEnum[keyof typeof MovimentacaoEstoqueDTOTipoEnum];

/**
 * Dados de uma ordem de serviço
 * @export
 * @interface OrdemServicoDTO
 */
export interface OrdemServicoDTO {
    /**
     * Identificador da ordem de serviço
     * @type {number}
     * @memberof OrdemServicoDTO
     */
    'id'?: number;
    /**
     * ID do agendamento associado
     * @type {number}
     * @memberof OrdemServicoDTO
     */
    'agendamentoId': number;
    /**
     * Logradouro do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'logradouro'?: string;
    /**
     * Número do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'numero'?: string;
    /**
     * Complemento do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'complemento'?: string;
    /**
     * Bairro do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'bairro'?: string;
    /**
     * Cidade do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'cidade'?: string;
    /**
     * UF do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'uf'?: string;
    /**
     * CEP do endereço do cliente
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'cep'?: string;
    /**
     * Status da ordem de serviço
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'status': OrdemServicoDTOStatusEnum;
    /**
     * Valor cobrado pelo serviço
     * @type {number}
     * @memberof OrdemServicoDTO
     */
    'valorServico': number;
    /**
     * Custo dos materiais utilizados
     * @type {number}
     * @memberof OrdemServicoDTO
     */
    'valorMateriais': number;
    /**
     * Quilometragem percorrida para o serviço
     * @type {number}
     * @memberof OrdemServicoDTO
     */
    'kmDeslocamento': number;
    /**
     * Observações adicionais da ordem de serviço
     * @type {string}
     * @memberof OrdemServicoDTO
     */
    'observacoes'?: string;
}

export const OrdemServicoDTOStatusEnum = {
    Agendada: 'AGENDADA',
    EmAndamento: 'EM_ANDAMENTO',
    Assinada: 'ASSINADA',
    Recusada: 'RECUSADA',
    Concluida: 'CONCLUIDA',
    Cancelada: 'CANCELADA'
} as const;

export type OrdemServicoDTOStatusEnum = typeof OrdemServicoDTOStatusEnum[keyof typeof OrdemServicoDTOStatusEnum];

/**
 * Dados de uma peça utilizada em Ordem de Serviço
 * @export
 * @interface PecaUtilizadaDTO
 */
export interface PecaUtilizadaDTO {
    /**
     * Identificador da peça utilizada
     * @type {number}
     * @memberof PecaUtilizadaDTO
     */
    'id'?: number;
    /**
     * Descrição da peça utilizada
     * @type {string}
     * @memberof PecaUtilizadaDTO
     */
    'descricao': string;
    /**
     * ID do produto relacionado
     * @type {number}
     * @memberof PecaUtilizadaDTO
     */
    'produtoId': number;
    /**
     * Quantidade de peças utilizadas
     * @type {number}
     * @memberof PecaUtilizadaDTO
     */
    'quantidade': number;
    /**
     * ID da Ordem de Serviço à qual a peça está vinculada
     * @type {number}
     * @memberof PecaUtilizadaDTO
     */
    'ordemServicoId': number;
}
/**
 * Dados de um produto em estoque
 * @export
 * @interface ProdutoDTO
 */
export interface ProdutoDTO {
    /**
     * Identificador do produto
     * @type {number}
     * @memberof ProdutoDTO
     */
    'id'?: number;
    /**
     * Nome do produto
     * @type {string}
     * @memberof ProdutoDTO
     */
    'nome': string;
    /**
     * Descrição opcional do produto
     * @type {string}
     * @memberof ProdutoDTO
     */
    'descricao'?: string;
    /**
     * Quantidade disponível em estoque
     * @type {number}
     * @memberof ProdutoDTO
     */
    'quantidadeEstoque': number;
    /**
     * Valor do produto
     * @type {number}
     * @memberof ProdutoDTO
     */
    'valor': number;
}
/**
 * Resumo com os principais indicadores do dashboard
 * @export
 * @interface ResumoDashboardDTO
 */
export interface ResumoDashboardDTO {
    /**
     * Receita total em reais
     * @type {number}
     * @memberof ResumoDashboardDTO
     */
    'receita': number;
    /**
     * Despesa total em reais
     * @type {number}
     * @memberof ResumoDashboardDTO
     */
    'despesa': number;
    /**
     * Lucro total em reais
     * @type {number}
     * @memberof ResumoDashboardDTO
     */
    'lucro': number;
    /**
     * Total de serviços realizados
     * @type {number}
     * @memberof ResumoDashboardDTO
     */
    'totalServicos': number;
}
/**
 * Dados de uma role de acesso
 * @export
 * @interface RoleDTO
 */
export interface RoleDTO {
    /**
     * Identificador da role
     * @type {number}
     * @memberof RoleDTO
     */
    'idRole'?: number;
    /**
     * Nome técnico da role
     * @type {string}
     * @memberof RoleDTO
     */
    'nomeRole': string;
    /**
     * Descrição da finalidade da role
     * @type {string}
     * @memberof RoleDTO
     */
    'descricao'?: string;
}
/**
 * Dados de um serviço oferecido pelo sistema
 * @export
 * @interface ServicoDTO
 */
export interface ServicoDTO {
    /**
     * Identificador do serviço
     * @type {number}
     * @memberof ServicoDTO
     */
    'idServico'?: number;
    /**
     * Descrição detalhada do serviço
     * @type {string}
     * @memberof ServicoDTO
     */
    'descricao': string;
    /**
     * Categoria à qual o serviço pertence
     * @type {string}
     * @memberof ServicoDTO
     */
    'categoria': string;
    /**
     * Valor estimado do serviço
     * @type {number}
     * @memberof ServicoDTO
     */
    'valorEstimado': number;
    /**
     * Tempo estimado para conclusão do serviço (em minutos)
     * @type {number}
     * @memberof ServicoDTO
     */
    'tempoEstimado': number;
}
/**
 * Dados de um técnico
 * @export
 * @interface TecnicoDTO
 */
export interface TecnicoDTO {
    /**
     * Identificador do técnico
     * @type {number}
     * @memberof TecnicoDTO
     */
    'id'?: number;
    /**
     * Nome completo do técnico
     * @type {string}
     * @memberof TecnicoDTO
     */
    'nome': string;
    /**
     * E-mail de acesso do técnico
     * @type {string}
     * @memberof TecnicoDTO
     */
    'email': string;
    /**
     * Telefone de contato do técnico
     * @type {string}
     * @memberof TecnicoDTO
     */
    'telefone': string;
    /**
     * Especialidade do técnico
     * @type {string}
     * @memberof TecnicoDTO
     */
    'especialidade': string;
    /**
     * Data de contratação do técnico
     * @type {string}
     * @memberof TecnicoDTO
     */
    'dataContratacao': string;
    /**
     * Senha criptografada do técnico
     * @type {string}
     * @memberof TecnicoDTO
     */
    'senha': string;
    /**
     * Conjunto de roles atribuídas ao técnico
     * @type {Set<RoleDTO>}
     * @memberof TecnicoDTO
     */
    'roles'?: Set<RoleDTO>;
}

/**
 * AgendamentosApi - axios parameter creator
 * @export
 */
export const AgendamentosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Criar um novo agendamento
         * @param {AgendamentoDTO} agendamentoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3: async (agendamentoDTO: AgendamentoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agendamentoDTO' is not null or undefined
            assertParamExists('create3', 'agendamentoDTO', agendamentoDTO)
            const localVarPath = `/api/agendamentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agendamentoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criarOs: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('criarOs', 'id', id)
            const localVarPath = `/api/agendamentos/{id}/os`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir agendamento por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete4', 'id', id)
            const localVarPath = `/api/agendamentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os agendamentos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll4: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/agendamentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar agendamento por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById4: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById4', 'id', id)
            const localVarPath = `/api/agendamentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tecnicoId 
         * @param {string} dia 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocupados: async (tecnicoId: number, dia: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tecnicoId' is not null or undefined
            assertParamExists('ocupados', 'tecnicoId', tecnicoId)
            // verify required parameter 'dia' is not null or undefined
            assertParamExists('ocupados', 'dia', dia)
            const localVarPath = `/api/agendamentos/disponibilidade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tecnicoId !== undefined) {
                localVarQueryParameter['tecnicoId'] = tecnicoId;
            }

            if (dia !== undefined) {
                localVarQueryParameter['dia'] = (dia as any instanceof Date) ?
                    (dia as any).toISOString().substring(0,10) :
                    dia;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Atualizar status do agendamento
         * @param {number} id 
         * @param {AgendamentoDTO} agendamentoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4: async (id: number, agendamentoDTO: AgendamentoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update4', 'id', id)
            // verify required parameter 'agendamentoDTO' is not null or undefined
            assertParamExists('update4', 'agendamentoDTO', agendamentoDTO)
            const localVarPath = `/api/agendamentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agendamentoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Alterar status do agendamento via PATCH
         * @param {number} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (id: number, status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStatus', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateStatus', 'status', status)
            const localVarPath = `/api/agendamentos/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgendamentosApi - functional programming interface
 * @export
 */
export const AgendamentosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgendamentosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Criar um novo agendamento
         * @param {AgendamentoDTO} agendamentoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(agendamentoDTO: AgendamentoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgendamentoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create3(agendamentoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.create3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criarOs(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdemServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criarOs(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.criarOs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir agendamento por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete4(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.delete4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os agendamentos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll4(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgendamentoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll4(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.findAll4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar agendamento por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById4(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgendamentoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.findById4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} tecnicoId 
         * @param {string} dia 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocupados(tecnicoId: number, dia: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocupados(tecnicoId, dia, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.ocupados']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Atualizar status do agendamento
         * @param {number} id 
         * @param {AgendamentoDTO} agendamentoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(id: number, agendamentoDTO: AgendamentoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgendamentoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update4(id, agendamentoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.update4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Alterar status do agendamento via PATCH
         * @param {number} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(id: number, status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgendamentoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(id, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendamentosApi.updateStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AgendamentosApi - factory interface
 * @export
 */
export const AgendamentosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgendamentosApiFp(configuration)
    return {
        /**
         * 
         * @summary Criar um novo agendamento
         * @param {AgendamentoDTO} agendamentoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3(agendamentoDTO: AgendamentoDTO, options?: RawAxiosRequestConfig): AxiosPromise<AgendamentoDTO> {
            return localVarFp.create3(agendamentoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criarOs(id: number, options?: RawAxiosRequestConfig): AxiosPromise<OrdemServicoDTO> {
            return localVarFp.criarOs(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir agendamento por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os agendamentos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll4(options?: RawAxiosRequestConfig): AxiosPromise<Array<AgendamentoDTO>> {
            return localVarFp.findAll4(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar agendamento por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById4(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AgendamentoDTO> {
            return localVarFp.findById4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} tecnicoId 
         * @param {string} dia 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocupados(tecnicoId: number, dia: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.ocupados(tecnicoId, dia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Atualizar status do agendamento
         * @param {number} id 
         * @param {AgendamentoDTO} agendamentoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4(id: number, agendamentoDTO: AgendamentoDTO, options?: RawAxiosRequestConfig): AxiosPromise<AgendamentoDTO> {
            return localVarFp.update4(id, agendamentoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Alterar status do agendamento via PATCH
         * @param {number} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(id: number, status: string, options?: RawAxiosRequestConfig): AxiosPromise<AgendamentoDTO> {
            return localVarFp.updateStatus(id, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgendamentosApi - object-oriented interface
 * @export
 * @class AgendamentosApi
 * @extends {BaseAPI}
 */
export class AgendamentosApi extends BaseAPI {
    /**
     * 
     * @summary Criar um novo agendamento
     * @param {AgendamentoDTO} agendamentoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public create3(agendamentoDTO: AgendamentoDTO, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).create3(agendamentoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public criarOs(id: number, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).criarOs(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir agendamento por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public delete4(id: number, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).delete4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os agendamentos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public findAll4(options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).findAll4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar agendamento por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public findById4(id: number, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).findById4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} tecnicoId 
     * @param {string} dia 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public ocupados(tecnicoId: number, dia: string, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).ocupados(tecnicoId, dia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Atualizar status do agendamento
     * @param {number} id 
     * @param {AgendamentoDTO} agendamentoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public update4(id: number, agendamentoDTO: AgendamentoDTO, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).update4(id, agendamentoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Alterar status do agendamento via PATCH
     * @param {number} id 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendamentosApi
     */
    public updateStatus(id: number, status: string, options?: RawAxiosRequestConfig) {
        return AgendamentosApiFp(this.configuration).updateStatus(id, status, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApuraesDeServioApi - axios parameter creator
 * @export
 */
export const ApuraesDeServioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Buscar apuração de serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId4: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buscarPorId4', 'id', id)
            const localVarPath = `/api/financeiro/apuracoes-servico/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar apurações de serviço por Ordem de Serviço
         * @param {number} ordemServicoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorOrdemServico: async (ordemServicoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ordemServicoId' is not null or undefined
            assertParamExists('listarPorOrdemServico', 'ordemServicoId', ordemServicoId)
            const localVarPath = `/api/financeiro/apuracoes-servico/ordem/{ordemServicoId}`
                .replace(`{${"ordemServicoId"}}`, encodeURIComponent(String(ordemServicoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todas as apurações de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/financeiro/apuracoes-servico`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApuraesDeServioApi - functional programming interface
 * @export
 */
export const ApuraesDeServioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApuraesDeServioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Buscar apuração de serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorId4(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApuracaoServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorId4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApuraesDeServioApi.buscarPorId4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar apurações de serviço por Ordem de Serviço
         * @param {number} ordemServicoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorOrdemServico(ordemServicoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApuracaoServicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorOrdemServico(ordemServicoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApuraesDeServioApi.listarPorOrdemServico']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todas as apurações de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodas2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApuracaoServicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodas2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApuraesDeServioApi.listarTodas2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApuraesDeServioApi - factory interface
 * @export
 */
export const ApuraesDeServioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApuraesDeServioApiFp(configuration)
    return {
        /**
         * 
         * @summary Buscar apuração de serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId4(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApuracaoServicoDTO> {
            return localVarFp.buscarPorId4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar apurações de serviço por Ordem de Serviço
         * @param {number} ordemServicoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorOrdemServico(ordemServicoId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApuracaoServicoDTO>> {
            return localVarFp.listarPorOrdemServico(ordemServicoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todas as apurações de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas2(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApuracaoServicoDTO>> {
            return localVarFp.listarTodas2(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApuraesDeServioApi - object-oriented interface
 * @export
 * @class ApuraesDeServioApi
 * @extends {BaseAPI}
 */
export class ApuraesDeServioApi extends BaseAPI {
    /**
     * 
     * @summary Buscar apuração de serviço por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApuraesDeServioApi
     */
    public buscarPorId4(id: number, options?: RawAxiosRequestConfig) {
        return ApuraesDeServioApiFp(this.configuration).buscarPorId4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar apurações de serviço por Ordem de Serviço
     * @param {number} ordemServicoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApuraesDeServioApi
     */
    public listarPorOrdemServico(ordemServicoId: number, options?: RawAxiosRequestConfig) {
        return ApuraesDeServioApiFp(this.configuration).listarPorOrdemServico(ordemServicoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todas as apurações de serviço
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApuraesDeServioApi
     */
    public listarTodas2(options?: RawAxiosRequestConfig) {
        return ApuraesDeServioApiFp(this.configuration).listarTodas2(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoriasFinanceirasApi - axios parameter creator
 * @export
 */
export const CategoriasFinanceirasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Atualizar uma categoria financeira existente
         * @param {number} id 
         * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar2: async (id: number, categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atualizar2', 'id', id)
            // verify required parameter 'categoriaFinanceiraDTO' is not null or undefined
            assertParamExists('atualizar2', 'categoriaFinanceiraDTO', categoriaFinanceiraDTO)
            const localVarPath = `/api/financeiro/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaFinanceiraDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar categoria financeira por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buscarPorId3', 'id', id)
            const localVarPath = `/api/financeiro/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Criar uma nova categoria financeira
         * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar2: async (categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoriaFinanceiraDTO' is not null or undefined
            assertParamExists('criar2', 'categoriaFinanceiraDTO', categoriaFinanceiraDTO)
            const localVarPath = `/api/financeiro/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriaFinanceiraDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir categoria financeira por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('excluir2', 'id', id)
            const localVarPath = `/api/financeiro/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todas as categorias financeiras
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/financeiro/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriasFinanceirasApi - functional programming interface
 * @export
 */
export const CategoriasFinanceirasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriasFinanceirasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Atualizar uma categoria financeira existente
         * @param {number} id 
         * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atualizar2(id: number, categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriaFinanceiraDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atualizar2(id, categoriaFinanceiraDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriasFinanceirasApi.atualizar2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar categoria financeira por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorId3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriaFinanceiraDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorId3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriasFinanceirasApi.buscarPorId3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Criar uma nova categoria financeira
         * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criar2(categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriaFinanceiraDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criar2(categoriaFinanceiraDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriasFinanceirasApi.criar2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir categoria financeira por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async excluir2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.excluir2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriasFinanceirasApi.excluir2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todas as categorias financeiras
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodas1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoriaFinanceiraDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodas1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriasFinanceirasApi.listarTodas1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriasFinanceirasApi - factory interface
 * @export
 */
export const CategoriasFinanceirasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriasFinanceirasApiFp(configuration)
    return {
        /**
         * 
         * @summary Atualizar uma categoria financeira existente
         * @param {number} id 
         * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar2(id: number, categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options?: RawAxiosRequestConfig): AxiosPromise<CategoriaFinanceiraDTO> {
            return localVarFp.atualizar2(id, categoriaFinanceiraDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar categoria financeira por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId3(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CategoriaFinanceiraDTO> {
            return localVarFp.buscarPorId3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Criar uma nova categoria financeira
         * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar2(categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options?: RawAxiosRequestConfig): AxiosPromise<CategoriaFinanceiraDTO> {
            return localVarFp.criar2(categoriaFinanceiraDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir categoria financeira por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir2(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.excluir2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todas as categorias financeiras
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas1(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoriaFinanceiraDTO>> {
            return localVarFp.listarTodas1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriasFinanceirasApi - object-oriented interface
 * @export
 * @class CategoriasFinanceirasApi
 * @extends {BaseAPI}
 */
export class CategoriasFinanceirasApi extends BaseAPI {
    /**
     * 
     * @summary Atualizar uma categoria financeira existente
     * @param {number} id 
     * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasFinanceirasApi
     */
    public atualizar2(id: number, categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options?: RawAxiosRequestConfig) {
        return CategoriasFinanceirasApiFp(this.configuration).atualizar2(id, categoriaFinanceiraDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar categoria financeira por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasFinanceirasApi
     */
    public buscarPorId3(id: number, options?: RawAxiosRequestConfig) {
        return CategoriasFinanceirasApiFp(this.configuration).buscarPorId3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Criar uma nova categoria financeira
     * @param {CategoriaFinanceiraDTO} categoriaFinanceiraDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasFinanceirasApi
     */
    public criar2(categoriaFinanceiraDTO: CategoriaFinanceiraDTO, options?: RawAxiosRequestConfig) {
        return CategoriasFinanceirasApiFp(this.configuration).criar2(categoriaFinanceiraDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir categoria financeira por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasFinanceirasApi
     */
    public excluir2(id: number, options?: RawAxiosRequestConfig) {
        return CategoriasFinanceirasApiFp(this.configuration).excluir2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todas as categorias financeiras
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasFinanceirasApi
     */
    public listarTodas1(options?: RawAxiosRequestConfig) {
        return CategoriasFinanceirasApiFp(this.configuration).listarTodas1(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientesApi - axios parameter creator
 * @export
 */
export const ClientesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Criar ou atualizar cliente pelo e-mail
         * @param {ClienteDTO} clienteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateByEmail: async (clienteDTO: ClienteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clienteDTO' is not null or undefined
            assertParamExists('createOrUpdateByEmail', 'clienteDTO', clienteDTO)
            const localVarPath = `/api/clientes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clienteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remover cliente por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete3', 'id', id)
            const localVarPath = `/api/clientes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os clientes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/clientes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar cliente por e-mail
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByEmail: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('findByEmail', 'email', email)
            const localVarPath = `/api/clientes/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar cliente por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById3', 'id', id)
            const localVarPath = `/api/clientes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Atualizar plenamente um cliente existente
         * @param {number} id 
         * @param {ClienteDTO} clienteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (id: number, clienteDTO: ClienteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update3', 'id', id)
            // verify required parameter 'clienteDTO' is not null or undefined
            assertParamExists('update3', 'clienteDTO', clienteDTO)
            const localVarPath = `/api/clientes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clienteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientesApi - functional programming interface
 * @export
 */
export const ClientesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Criar ou atualizar cliente pelo e-mail
         * @param {ClienteDTO} clienteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateByEmail(clienteDTO: ClienteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClienteDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateByEmail(clienteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientesApi.createOrUpdateByEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remover cliente por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientesApi.delete3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os clientes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClienteDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientesApi.findAll3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar cliente por e-mail
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findByEmail(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClienteDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findByEmail(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientesApi.findByEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar cliente por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClienteDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientesApi.findById3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Atualizar plenamente um cliente existente
         * @param {number} id 
         * @param {ClienteDTO} clienteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(id: number, clienteDTO: ClienteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClienteDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update3(id, clienteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientesApi.update3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientesApi - factory interface
 * @export
 */
export const ClientesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientesApiFp(configuration)
    return {
        /**
         * 
         * @summary Criar ou atualizar cliente pelo e-mail
         * @param {ClienteDTO} clienteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateByEmail(clienteDTO: ClienteDTO, options?: RawAxiosRequestConfig): AxiosPromise<ClienteDTO> {
            return localVarFp.createOrUpdateByEmail(clienteDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remover cliente por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os clientes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll3(options?: RawAxiosRequestConfig): AxiosPromise<Array<ClienteDTO>> {
            return localVarFp.findAll3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar cliente por e-mail
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByEmail(email: string, options?: RawAxiosRequestConfig): AxiosPromise<ClienteDTO> {
            return localVarFp.findByEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar cliente por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById3(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ClienteDTO> {
            return localVarFp.findById3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Atualizar plenamente um cliente existente
         * @param {number} id 
         * @param {ClienteDTO} clienteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3(id: number, clienteDTO: ClienteDTO, options?: RawAxiosRequestConfig): AxiosPromise<ClienteDTO> {
            return localVarFp.update3(id, clienteDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientesApi - object-oriented interface
 * @export
 * @class ClientesApi
 * @extends {BaseAPI}
 */
export class ClientesApi extends BaseAPI {
    /**
     * 
     * @summary Criar ou atualizar cliente pelo e-mail
     * @param {ClienteDTO} clienteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public createOrUpdateByEmail(clienteDTO: ClienteDTO, options?: RawAxiosRequestConfig) {
        return ClientesApiFp(this.configuration).createOrUpdateByEmail(clienteDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remover cliente por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public delete3(id: number, options?: RawAxiosRequestConfig) {
        return ClientesApiFp(this.configuration).delete3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os clientes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public findAll3(options?: RawAxiosRequestConfig) {
        return ClientesApiFp(this.configuration).findAll3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar cliente por e-mail
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public findByEmail(email: string, options?: RawAxiosRequestConfig) {
        return ClientesApiFp(this.configuration).findByEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar cliente por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public findById3(id: number, options?: RawAxiosRequestConfig) {
        return ClientesApiFp(this.configuration).findById3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Atualizar plenamente um cliente existente
     * @param {number} id 
     * @param {ClienteDTO} clienteDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public update3(id: number, clienteDTO: ClienteDTO, options?: RawAxiosRequestConfig) {
        return ClientesApiFp(this.configuration).update3(id, clienteDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContasCaixaApi - axios parameter creator
 * @export
 */
export const ContasCaixaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Atualizar uma conta caixa existente
         * @param {number} id 
         * @param {ContaCaixaDTO} contaCaixaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar1: async (id: number, contaCaixaDTO: ContaCaixaDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atualizar1', 'id', id)
            // verify required parameter 'contaCaixaDTO' is not null or undefined
            assertParamExists('atualizar1', 'contaCaixaDTO', contaCaixaDTO)
            const localVarPath = `/api/financeiro/contas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contaCaixaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar conta caixa por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buscarPorId2', 'id', id)
            const localVarPath = `/api/financeiro/contas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Criar uma nova conta caixa
         * @param {ContaCaixaDTO} contaCaixaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar1: async (contaCaixaDTO: ContaCaixaDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contaCaixaDTO' is not null or undefined
            assertParamExists('criar1', 'contaCaixaDTO', contaCaixaDTO)
            const localVarPath = `/api/financeiro/contas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contaCaixaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir uma conta caixa por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('excluir1', 'id', id)
            const localVarPath = `/api/financeiro/contas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todas as contas caixa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodos1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/financeiro/contas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContasCaixaApi - functional programming interface
 * @export
 */
export const ContasCaixaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContasCaixaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Atualizar uma conta caixa existente
         * @param {number} id 
         * @param {ContaCaixaDTO} contaCaixaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atualizar1(id: number, contaCaixaDTO: ContaCaixaDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContaCaixaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atualizar1(id, contaCaixaDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContasCaixaApi.atualizar1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar conta caixa por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorId2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContaCaixaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorId2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContasCaixaApi.buscarPorId2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Criar uma nova conta caixa
         * @param {ContaCaixaDTO} contaCaixaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criar1(contaCaixaDTO: ContaCaixaDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContaCaixaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criar1(contaCaixaDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContasCaixaApi.criar1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir uma conta caixa por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async excluir1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.excluir1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContasCaixaApi.excluir1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todas as contas caixa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodos1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContaCaixaDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodos1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContasCaixaApi.listarTodos1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContasCaixaApi - factory interface
 * @export
 */
export const ContasCaixaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContasCaixaApiFp(configuration)
    return {
        /**
         * 
         * @summary Atualizar uma conta caixa existente
         * @param {number} id 
         * @param {ContaCaixaDTO} contaCaixaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar1(id: number, contaCaixaDTO: ContaCaixaDTO, options?: RawAxiosRequestConfig): AxiosPromise<ContaCaixaDTO> {
            return localVarFp.atualizar1(id, contaCaixaDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar conta caixa por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId2(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ContaCaixaDTO> {
            return localVarFp.buscarPorId2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Criar uma nova conta caixa
         * @param {ContaCaixaDTO} contaCaixaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar1(contaCaixaDTO: ContaCaixaDTO, options?: RawAxiosRequestConfig): AxiosPromise<ContaCaixaDTO> {
            return localVarFp.criar1(contaCaixaDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir uma conta caixa por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.excluir1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todas as contas caixa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodos1(options?: RawAxiosRequestConfig): AxiosPromise<Array<ContaCaixaDTO>> {
            return localVarFp.listarTodos1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContasCaixaApi - object-oriented interface
 * @export
 * @class ContasCaixaApi
 * @extends {BaseAPI}
 */
export class ContasCaixaApi extends BaseAPI {
    /**
     * 
     * @summary Atualizar uma conta caixa existente
     * @param {number} id 
     * @param {ContaCaixaDTO} contaCaixaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContasCaixaApi
     */
    public atualizar1(id: number, contaCaixaDTO: ContaCaixaDTO, options?: RawAxiosRequestConfig) {
        return ContasCaixaApiFp(this.configuration).atualizar1(id, contaCaixaDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar conta caixa por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContasCaixaApi
     */
    public buscarPorId2(id: number, options?: RawAxiosRequestConfig) {
        return ContasCaixaApiFp(this.configuration).buscarPorId2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Criar uma nova conta caixa
     * @param {ContaCaixaDTO} contaCaixaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContasCaixaApi
     */
    public criar1(contaCaixaDTO: ContaCaixaDTO, options?: RawAxiosRequestConfig) {
        return ContasCaixaApiFp(this.configuration).criar1(contaCaixaDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir uma conta caixa por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContasCaixaApi
     */
    public excluir1(id: number, options?: RawAxiosRequestConfig) {
        return ContasCaixaApiFp(this.configuration).excluir1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todas as contas caixa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContasCaixaApi
     */
    public listarTodos1(options?: RawAxiosRequestConfig) {
        return ContasCaixaApiFp(this.configuration).listarTodos1(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Distribuição de clientes por origem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesPorOrigem: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/clientes/por-origem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clientes únicos ativos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesUnicos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/clientes/ativos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Comissões por técnico
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comissoesPorTecnico: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/tecnicos/comissoes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Custo total das ordens de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custoTotalOS: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/os/custo-total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Despesas totais no financeiro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        despesasTotais: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/financeiro/despesas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lucro por mês
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lucroPorMes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/financeiro/lucro-por-mes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ordens de serviço por serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        osPorServico: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/os/por-servico`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ordens de serviço por status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        osPorStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/os/por-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receita total no financeiro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receitaTotal: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/financeiro/receita`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resumo geral do dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/resumo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Serviços cancelados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosCancelados: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/servicos/cancelados`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Serviços concluídos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosConcluidos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/servicos/concluidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Serviços finalizados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosFinalizados: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/servicos/finalizados`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Serviços mais vendidos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosMaisVendidos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/servicos/mais-vendidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Total de serviços cadastrados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalServicos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/servicos/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Valor total das ordens de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valorTotalOS: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/os/valor-total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vendas por técnico
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendasPorTecnico: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dashboard/tecnicos/vendas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Distribuição de clientes por origem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientesPorOrigem(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientesPorOrigem(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.clientesPorOrigem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Clientes únicos ativos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientesUnicos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientesUnicos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.clientesUnicos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Comissões por técnico
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async comissoesPorTecnico(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.comissoesPorTecnico(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.comissoesPorTecnico']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Custo total das ordens de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custoTotalOS(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.custoTotalOS(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.custoTotalOS']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Despesas totais no financeiro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async despesasTotais(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.despesasTotais(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.despesasTotais']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lucro por mês
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lucroPorMes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lucroPorMes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.lucroPorMes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ordens de serviço por serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async osPorServico(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.osPorServico(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.osPorServico']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ordens de serviço por status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async osPorStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.osPorStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.osPorStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Receita total no financeiro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receitaTotal(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receitaTotal(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.receitaTotal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Resumo geral do dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResumoDashboardDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.resumo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Serviços cancelados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicosCancelados(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicosCancelados(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.servicosCancelados']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Serviços concluídos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicosConcluidos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicosConcluidos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.servicosConcluidos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Serviços finalizados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicosFinalizados(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicosFinalizados(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.servicosFinalizados']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Serviços mais vendidos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicosMaisVendidos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicosMaisVendidos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.servicosMaisVendidos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Total de serviços cadastrados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totalServicos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.totalServicos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.totalServicos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Valor total das ordens de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valorTotalOS(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valorTotalOS(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.valorTotalOS']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Vendas por técnico
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendasPorTecnico(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendasPorTecnico(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardApi.vendasPorTecnico']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 
         * @summary Distribuição de clientes por origem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesPorOrigem(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clientesPorOrigem(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clientes únicos ativos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesUnicos(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.clientesUnicos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Comissões por técnico
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        comissoesPorTecnico(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.comissoesPorTecnico(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Custo total das ordens de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custoTotalOS(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.custoTotalOS(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Despesas totais no financeiro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        despesasTotais(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.despesasTotais(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lucro por mês
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lucroPorMes(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.lucroPorMes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ordens de serviço por serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        osPorServico(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.osPorServico(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ordens de serviço por status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        osPorStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.osPorStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Receita total no financeiro
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receitaTotal(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.receitaTotal(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resumo geral do dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumo(options?: RawAxiosRequestConfig): AxiosPromise<ResumoDashboardDTO> {
            return localVarFp.resumo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Serviços cancelados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosCancelados(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.servicosCancelados(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Serviços concluídos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosConcluidos(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.servicosConcluidos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Serviços finalizados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosFinalizados(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.servicosFinalizados(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Serviços mais vendidos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicosMaisVendidos(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicosMaisVendidos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Total de serviços cadastrados
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalServicos(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.totalServicos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Valor total das ordens de serviço
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valorTotalOS(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.valorTotalOS(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vendas por técnico
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendasPorTecnico(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendasPorTecnico(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * 
     * @summary Distribuição de clientes por origem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public clientesPorOrigem(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).clientesPorOrigem(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clientes únicos ativos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public clientesUnicos(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).clientesUnicos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Comissões por técnico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public comissoesPorTecnico(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).comissoesPorTecnico(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Custo total das ordens de serviço
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public custoTotalOS(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).custoTotalOS(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Despesas totais no financeiro
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public despesasTotais(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).despesasTotais(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lucro por mês
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public lucroPorMes(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).lucroPorMes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ordens de serviço por serviço
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public osPorServico(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).osPorServico(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ordens de serviço por status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public osPorStatus(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).osPorStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Receita total no financeiro
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public receitaTotal(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).receitaTotal(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resumo geral do dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public resumo(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).resumo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Serviços cancelados
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public servicosCancelados(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).servicosCancelados(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Serviços concluídos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public servicosConcluidos(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).servicosConcluidos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Serviços finalizados
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public servicosFinalizados(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).servicosFinalizados(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Serviços mais vendidos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public servicosMaisVendidos(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).servicosMaisVendidos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Total de serviços cadastrados
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public totalServicos(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).totalServicos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Valor total das ordens de serviço
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public valorTotalOS(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).valorTotalOS(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vendas por técnico
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public vendasPorTecnico(options?: RawAxiosRequestConfig) {
        return DashboardApiFp(this.configuration).vendasPorTecnico(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LanamentosFinanceirosApi - axios parameter creator
 * @export
 */
export const LanamentosFinanceirosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Atualizar um lançamento financeiro existente
         * @param {number} id 
         * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar: async (id: number, lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atualizar', 'id', id)
            // verify required parameter 'lancamentoFinanceiroDTO' is not null or undefined
            assertParamExists('atualizar', 'lancamentoFinanceiroDTO', lancamentoFinanceiroDTO)
            const localVarPath = `/api/financeiro/lancamentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lancamentoFinanceiroDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar lançamento financeiro por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buscarPorId1', 'id', id)
            const localVarPath = `/api/financeiro/lancamentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Criar um novo lançamento financeiro
         * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar: async (lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lancamentoFinanceiroDTO' is not null or undefined
            assertParamExists('criar', 'lancamentoFinanceiroDTO', lancamentoFinanceiroDTO)
            const localVarPath = `/api/financeiro/lancamentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lancamentoFinanceiroDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir um lançamento financeiro por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('excluir', 'id', id)
            const localVarPath = `/api/financeiro/lancamentos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar lançamentos de uma conta caixa específica
         * @param {number} contaCaixaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorConta: async (contaCaixaId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contaCaixaId' is not null or undefined
            assertParamExists('listarPorConta', 'contaCaixaId', contaCaixaId)
            const localVarPath = `/api/financeiro/lancamentos/conta/{contaCaixaId}`
                .replace(`{${"contaCaixaId"}}`, encodeURIComponent(String(contaCaixaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar lançamentos filtrados por tipo de transação
         * @param {ListarPorTipoTipoTransacaoEnum} tipoTransacao 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorTipo: async (tipoTransacao: ListarPorTipoTipoTransacaoEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tipoTransacao' is not null or undefined
            assertParamExists('listarPorTipo', 'tipoTransacao', tipoTransacao)
            const localVarPath = `/api/financeiro/lancamentos/tipo/{tipoTransacao}`
                .replace(`{${"tipoTransacao"}}`, encodeURIComponent(String(tipoTransacao)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os lançamentos financeiros
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/financeiro/lancamentos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanamentosFinanceirosApi - functional programming interface
 * @export
 */
export const LanamentosFinanceirosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LanamentosFinanceirosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Atualizar um lançamento financeiro existente
         * @param {number} id 
         * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atualizar(id: number, lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LancamentoFinanceiroDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atualizar(id, lancamentoFinanceiroDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.atualizar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar lançamento financeiro por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorId1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LancamentoFinanceiroDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorId1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.buscarPorId1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Criar um novo lançamento financeiro
         * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criar(lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LancamentoFinanceiroDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criar(lancamentoFinanceiroDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.criar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir um lançamento financeiro por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async excluir(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.excluir(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.excluir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar lançamentos de uma conta caixa específica
         * @param {number} contaCaixaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorConta(contaCaixaId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LancamentoFinanceiroDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorConta(contaCaixaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.listarPorConta']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar lançamentos filtrados por tipo de transação
         * @param {ListarPorTipoTipoTransacaoEnum} tipoTransacao 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorTipo(tipoTransacao: ListarPorTipoTipoTransacaoEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LancamentoFinanceiroDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorTipo(tipoTransacao, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.listarPorTipo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os lançamentos financeiros
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LancamentoFinanceiroDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanamentosFinanceirosApi.listarTodos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LanamentosFinanceirosApi - factory interface
 * @export
 */
export const LanamentosFinanceirosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanamentosFinanceirosApiFp(configuration)
    return {
        /**
         * 
         * @summary Atualizar um lançamento financeiro existente
         * @param {number} id 
         * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar(id: number, lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options?: RawAxiosRequestConfig): AxiosPromise<LancamentoFinanceiroDTO> {
            return localVarFp.atualizar(id, lancamentoFinanceiroDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar lançamento financeiro por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<LancamentoFinanceiroDTO> {
            return localVarFp.buscarPorId1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Criar um novo lançamento financeiro
         * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar(lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options?: RawAxiosRequestConfig): AxiosPromise<LancamentoFinanceiroDTO> {
            return localVarFp.criar(lancamentoFinanceiroDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir um lançamento financeiro por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.excluir(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar lançamentos de uma conta caixa específica
         * @param {number} contaCaixaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorConta(contaCaixaId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<LancamentoFinanceiroDTO>> {
            return localVarFp.listarPorConta(contaCaixaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar lançamentos filtrados por tipo de transação
         * @param {ListarPorTipoTipoTransacaoEnum} tipoTransacao 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorTipo(tipoTransacao: ListarPorTipoTipoTransacaoEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<LancamentoFinanceiroDTO>> {
            return localVarFp.listarPorTipo(tipoTransacao, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os lançamentos financeiros
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodos(options?: RawAxiosRequestConfig): AxiosPromise<Array<LancamentoFinanceiroDTO>> {
            return localVarFp.listarTodos(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LanamentosFinanceirosApi - object-oriented interface
 * @export
 * @class LanamentosFinanceirosApi
 * @extends {BaseAPI}
 */
export class LanamentosFinanceirosApi extends BaseAPI {
    /**
     * 
     * @summary Atualizar um lançamento financeiro existente
     * @param {number} id 
     * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public atualizar(id: number, lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).atualizar(id, lancamentoFinanceiroDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar lançamento financeiro por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public buscarPorId1(id: number, options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).buscarPorId1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Criar um novo lançamento financeiro
     * @param {LancamentoFinanceiroDTO} lancamentoFinanceiroDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public criar(lancamentoFinanceiroDTO: LancamentoFinanceiroDTO, options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).criar(lancamentoFinanceiroDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir um lançamento financeiro por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public excluir(id: number, options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).excluir(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar lançamentos de uma conta caixa específica
     * @param {number} contaCaixaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public listarPorConta(contaCaixaId: number, options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).listarPorConta(contaCaixaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar lançamentos filtrados por tipo de transação
     * @param {ListarPorTipoTipoTransacaoEnum} tipoTransacao 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public listarPorTipo(tipoTransacao: ListarPorTipoTipoTransacaoEnum, options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).listarPorTipo(tipoTransacao, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os lançamentos financeiros
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanamentosFinanceirosApi
     */
    public listarTodos(options?: RawAxiosRequestConfig) {
        return LanamentosFinanceirosApiFp(this.configuration).listarTodos(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListarPorTipoTipoTransacaoEnum = {
    Receita: 'RECEITA',
    Despesa: 'DESPESA'
} as const;
export type ListarPorTipoTipoTransacaoEnum = typeof ListarPorTipoTipoTransacaoEnum[keyof typeof ListarPorTipoTipoTransacaoEnum];


/**
 * MovimentaesDeEstoqueApi - axios parameter creator
 * @export
 */
export const MovimentaesDeEstoqueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listar todas as movimentações de um produto específico
         * @param {number} produtoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorProduto: async (produtoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'produtoId' is not null or undefined
            assertParamExists('listarPorProduto', 'produtoId', produtoId)
            const localVarPath = `/api/estoque/movimentacoes/produto/{produtoId}`
                .replace(`{${"produtoId"}}`, encodeURIComponent(String(produtoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todas as movimentações de estoque
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/estoque/movimentacoes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Registrar uma movimentação de estoque (entrada ou saída)
         * @param {MovimentacaoEstoqueDTO} movimentacaoEstoqueDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrar: async (movimentacaoEstoqueDTO: MovimentacaoEstoqueDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'movimentacaoEstoqueDTO' is not null or undefined
            assertParamExists('registrar', 'movimentacaoEstoqueDTO', movimentacaoEstoqueDTO)
            const localVarPath = `/api/estoque/movimentacoes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(movimentacaoEstoqueDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovimentaesDeEstoqueApi - functional programming interface
 * @export
 */
export const MovimentaesDeEstoqueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MovimentaesDeEstoqueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listar todas as movimentações de um produto específico
         * @param {number} produtoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorProduto(produtoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MovimentacaoEstoqueDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorProduto(produtoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovimentaesDeEstoqueApi.listarPorProduto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todas as movimentações de estoque
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodas3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MovimentacaoEstoqueDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodas3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovimentaesDeEstoqueApi.listarTodas3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Registrar uma movimentação de estoque (entrada ou saída)
         * @param {MovimentacaoEstoqueDTO} movimentacaoEstoqueDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrar(movimentacaoEstoqueDTO: MovimentacaoEstoqueDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovimentacaoEstoqueDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registrar(movimentacaoEstoqueDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovimentaesDeEstoqueApi.registrar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MovimentaesDeEstoqueApi - factory interface
 * @export
 */
export const MovimentaesDeEstoqueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MovimentaesDeEstoqueApiFp(configuration)
    return {
        /**
         * 
         * @summary Listar todas as movimentações de um produto específico
         * @param {number} produtoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorProduto(produtoId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<MovimentacaoEstoqueDTO>> {
            return localVarFp.listarPorProduto(produtoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todas as movimentações de estoque
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas3(options?: RawAxiosRequestConfig): AxiosPromise<Array<MovimentacaoEstoqueDTO>> {
            return localVarFp.listarTodas3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Registrar uma movimentação de estoque (entrada ou saída)
         * @param {MovimentacaoEstoqueDTO} movimentacaoEstoqueDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrar(movimentacaoEstoqueDTO: MovimentacaoEstoqueDTO, options?: RawAxiosRequestConfig): AxiosPromise<MovimentacaoEstoqueDTO> {
            return localVarFp.registrar(movimentacaoEstoqueDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MovimentaesDeEstoqueApi - object-oriented interface
 * @export
 * @class MovimentaesDeEstoqueApi
 * @extends {BaseAPI}
 */
export class MovimentaesDeEstoqueApi extends BaseAPI {
    /**
     * 
     * @summary Listar todas as movimentações de um produto específico
     * @param {number} produtoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovimentaesDeEstoqueApi
     */
    public listarPorProduto(produtoId: number, options?: RawAxiosRequestConfig) {
        return MovimentaesDeEstoqueApiFp(this.configuration).listarPorProduto(produtoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todas as movimentações de estoque
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovimentaesDeEstoqueApi
     */
    public listarTodas3(options?: RawAxiosRequestConfig) {
        return MovimentaesDeEstoqueApiFp(this.configuration).listarTodas3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Registrar uma movimentação de estoque (entrada ou saída)
     * @param {MovimentacaoEstoqueDTO} movimentacaoEstoqueDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovimentaesDeEstoqueApi
     */
    public registrar(movimentacaoEstoqueDTO: MovimentacaoEstoqueDTO, options?: RawAxiosRequestConfig) {
        return MovimentaesDeEstoqueApiFp(this.configuration).registrar(movimentacaoEstoqueDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdemServicoControllerApi - axios parameter creator
 * @export
 */
export const OrdemServicoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {OrdemServicoDTO} ordemServicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizarOrdem: async (id: number, ordemServicoDTO: OrdemServicoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atualizarOrdem', 'id', id)
            // verify required parameter 'ordemServicoDTO' is not null or undefined
            assertParamExists('atualizarOrdem', 'ordemServicoDTO', ordemServicoDTO)
            const localVarPath = `/api/os/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ordemServicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buscarPorId', 'id', id)
            const localVarPath = `/api/os/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} agendamentoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criarOrdem: async (agendamentoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agendamentoId' is not null or undefined
            assertParamExists('criarOrdem', 'agendamentoId', agendamentoId)
            const localVarPath = `/api/agendamentos/{agendamentoId}/os`
                .replace(`{${"agendamentoId"}}`, encodeURIComponent(String(agendamentoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluirOrdem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('excluirOrdem', 'id', id)
            const localVarPath = `/api/os/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListarPorStatusStatusEnum} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorStatus: async (status: ListarPorStatusStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('listarPorStatus', 'status', status)
            const localVarPath = `/api/os/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/os`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdemServicoControllerApi - functional programming interface
 * @export
 */
export const OrdemServicoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdemServicoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {OrdemServicoDTO} ordemServicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atualizarOrdem(id: number, ordemServicoDTO: OrdemServicoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdemServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atualizarOrdem(id, ordemServicoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdemServicoControllerApi.atualizarOrdem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdemServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdemServicoControllerApi.buscarPorId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} agendamentoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criarOrdem(agendamentoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdemServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criarOrdem(agendamentoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdemServicoControllerApi.criarOrdem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async excluirOrdem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.excluirOrdem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdemServicoControllerApi.excluirOrdem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListarPorStatusStatusEnum} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorStatus(status: ListarPorStatusStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrdemServicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorStatus(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdemServicoControllerApi.listarPorStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodas(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrdemServicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodas(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdemServicoControllerApi.listarTodas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdemServicoControllerApi - factory interface
 * @export
 */
export const OrdemServicoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdemServicoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {OrdemServicoDTO} ordemServicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizarOrdem(id: number, ordemServicoDTO: OrdemServicoDTO, options?: RawAxiosRequestConfig): AxiosPromise<OrdemServicoDTO> {
            return localVarFp.atualizarOrdem(id, ordemServicoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<OrdemServicoDTO> {
            return localVarFp.buscarPorId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} agendamentoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criarOrdem(agendamentoId: number, options?: RawAxiosRequestConfig): AxiosPromise<OrdemServicoDTO> {
            return localVarFp.criarOrdem(agendamentoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluirOrdem(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.excluirOrdem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListarPorStatusStatusEnum} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorStatus(status: ListarPorStatusStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrdemServicoDTO>> {
            return localVarFp.listarPorStatus(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodas(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrdemServicoDTO>> {
            return localVarFp.listarTodas(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdemServicoControllerApi - object-oriented interface
 * @export
 * @class OrdemServicoControllerApi
 * @extends {BaseAPI}
 */
export class OrdemServicoControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {OrdemServicoDTO} ordemServicoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdemServicoControllerApi
     */
    public atualizarOrdem(id: number, ordemServicoDTO: OrdemServicoDTO, options?: RawAxiosRequestConfig) {
        return OrdemServicoControllerApiFp(this.configuration).atualizarOrdem(id, ordemServicoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdemServicoControllerApi
     */
    public buscarPorId(id: number, options?: RawAxiosRequestConfig) {
        return OrdemServicoControllerApiFp(this.configuration).buscarPorId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} agendamentoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdemServicoControllerApi
     */
    public criarOrdem(agendamentoId: number, options?: RawAxiosRequestConfig) {
        return OrdemServicoControllerApiFp(this.configuration).criarOrdem(agendamentoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdemServicoControllerApi
     */
    public excluirOrdem(id: number, options?: RawAxiosRequestConfig) {
        return OrdemServicoControllerApiFp(this.configuration).excluirOrdem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListarPorStatusStatusEnum} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdemServicoControllerApi
     */
    public listarPorStatus(status: ListarPorStatusStatusEnum, options?: RawAxiosRequestConfig) {
        return OrdemServicoControllerApiFp(this.configuration).listarPorStatus(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdemServicoControllerApi
     */
    public listarTodas(options?: RawAxiosRequestConfig) {
        return OrdemServicoControllerApiFp(this.configuration).listarTodas(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListarPorStatusStatusEnum = {
    Agendada: 'AGENDADA',
    EmAndamento: 'EM_ANDAMENTO',
    Assinada: 'ASSINADA',
    Recusada: 'RECUSADA',
    Concluida: 'CONCLUIDA',
    Cancelada: 'CANCELADA'
} as const;
export type ListarPorStatusStatusEnum = typeof ListarPorStatusStatusEnum[keyof typeof ListarPorStatusStatusEnum];


/**
 * PeasUtilizadasApi - axios parameter creator
 * @export
 */
export const PeasUtilizadasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listar peças utilizadas de uma ordem de serviço específica
         * @param {number} ordemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorOrdem: async (ordemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ordemId' is not null or undefined
            assertParamExists('listarPorOrdem', 'ordemId', ordemId)
            const localVarPath = `/api/estoque/pecas-utilizadas/ordem/{ordemId}`
                .replace(`{${"ordemId"}}`, encodeURIComponent(String(ordemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Salvar peças utilizadas para uma ordem de serviço
         * @param {number} ordemId 
         * @param {Array<PecaUtilizadaDTO>} pecaUtilizadaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salvarPorOrdem: async (ordemId: number, pecaUtilizadaDTO: Array<PecaUtilizadaDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ordemId' is not null or undefined
            assertParamExists('salvarPorOrdem', 'ordemId', ordemId)
            // verify required parameter 'pecaUtilizadaDTO' is not null or undefined
            assertParamExists('salvarPorOrdem', 'pecaUtilizadaDTO', pecaUtilizadaDTO)
            const localVarPath = `/api/estoque/pecas-utilizadas/ordem/{ordemId}`
                .replace(`{${"ordemId"}}`, encodeURIComponent(String(ordemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pecaUtilizadaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeasUtilizadasApi - functional programming interface
 * @export
 */
export const PeasUtilizadasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeasUtilizadasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listar peças utilizadas de uma ordem de serviço específica
         * @param {number} ordemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorOrdem(ordemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PecaUtilizadaDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorOrdem(ordemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeasUtilizadasApi.listarPorOrdem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Salvar peças utilizadas para uma ordem de serviço
         * @param {number} ordemId 
         * @param {Array<PecaUtilizadaDTO>} pecaUtilizadaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salvarPorOrdem(ordemId: number, pecaUtilizadaDTO: Array<PecaUtilizadaDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PecaUtilizadaDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salvarPorOrdem(ordemId, pecaUtilizadaDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeasUtilizadasApi.salvarPorOrdem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PeasUtilizadasApi - factory interface
 * @export
 */
export const PeasUtilizadasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeasUtilizadasApiFp(configuration)
    return {
        /**
         * 
         * @summary Listar peças utilizadas de uma ordem de serviço específica
         * @param {number} ordemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorOrdem(ordemId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PecaUtilizadaDTO>> {
            return localVarFp.listarPorOrdem(ordemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Salvar peças utilizadas para uma ordem de serviço
         * @param {number} ordemId 
         * @param {Array<PecaUtilizadaDTO>} pecaUtilizadaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salvarPorOrdem(ordemId: number, pecaUtilizadaDTO: Array<PecaUtilizadaDTO>, options?: RawAxiosRequestConfig): AxiosPromise<Array<PecaUtilizadaDTO>> {
            return localVarFp.salvarPorOrdem(ordemId, pecaUtilizadaDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PeasUtilizadasApi - object-oriented interface
 * @export
 * @class PeasUtilizadasApi
 * @extends {BaseAPI}
 */
export class PeasUtilizadasApi extends BaseAPI {
    /**
     * 
     * @summary Listar peças utilizadas de uma ordem de serviço específica
     * @param {number} ordemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeasUtilizadasApi
     */
    public listarPorOrdem(ordemId: number, options?: RawAxiosRequestConfig) {
        return PeasUtilizadasApiFp(this.configuration).listarPorOrdem(ordemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Salvar peças utilizadas para uma ordem de serviço
     * @param {number} ordemId 
     * @param {Array<PecaUtilizadaDTO>} pecaUtilizadaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeasUtilizadasApi
     */
    public salvarPorOrdem(ordemId: number, pecaUtilizadaDTO: Array<PecaUtilizadaDTO>, options?: RawAxiosRequestConfig) {
        return PeasUtilizadasApiFp(this.configuration).salvarPorOrdem(ordemId, pecaUtilizadaDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProdutosApi - axios parameter creator
 * @export
 */
export const ProdutosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Atualizar um produto existente
         * @param {number} id 
         * @param {ProdutoDTO} produtoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar3: async (id: number, produtoDTO: ProdutoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atualizar3', 'id', id)
            // verify required parameter 'produtoDTO' is not null or undefined
            assertParamExists('atualizar3', 'produtoDTO', produtoDTO)
            const localVarPath = `/api/estoque/produtos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(produtoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar produto por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId5: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('buscarPorId5', 'id', id)
            const localVarPath = `/api/estoque/produtos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Criar um novo produto
         * @param {ProdutoDTO} produtoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar3: async (produtoDTO: ProdutoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'produtoDTO' is not null or undefined
            assertParamExists('criar3', 'produtoDTO', produtoDTO)
            const localVarPath = `/api/estoque/produtos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(produtoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir um produto por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir3: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('excluir3', 'id', id)
            const localVarPath = `/api/estoque/produtos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os produtos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodos2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/estoque/produtos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProdutosApi - functional programming interface
 * @export
 */
export const ProdutosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProdutosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Atualizar um produto existente
         * @param {number} id 
         * @param {ProdutoDTO} produtoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atualizar3(id: number, produtoDTO: ProdutoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProdutoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atualizar3(id, produtoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProdutosApi.atualizar3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar produto por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorId5(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProdutoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorId5(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProdutosApi.buscarPorId5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Criar um novo produto
         * @param {ProdutoDTO} produtoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criar3(produtoDTO: ProdutoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProdutoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criar3(produtoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProdutosApi.criar3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir um produto por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async excluir3(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.excluir3(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProdutosApi.excluir3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os produtos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarTodos2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProdutoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarTodos2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProdutosApi.listarTodos2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProdutosApi - factory interface
 * @export
 */
export const ProdutosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProdutosApiFp(configuration)
    return {
        /**
         * 
         * @summary Atualizar um produto existente
         * @param {number} id 
         * @param {ProdutoDTO} produtoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atualizar3(id: number, produtoDTO: ProdutoDTO, options?: RawAxiosRequestConfig): AxiosPromise<ProdutoDTO> {
            return localVarFp.atualizar3(id, produtoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar produto por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorId5(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ProdutoDTO> {
            return localVarFp.buscarPorId5(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Criar um novo produto
         * @param {ProdutoDTO} produtoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criar3(produtoDTO: ProdutoDTO, options?: RawAxiosRequestConfig): AxiosPromise<ProdutoDTO> {
            return localVarFp.criar3(produtoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir um produto por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excluir3(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.excluir3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os produtos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarTodos2(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProdutoDTO>> {
            return localVarFp.listarTodos2(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProdutosApi - object-oriented interface
 * @export
 * @class ProdutosApi
 * @extends {BaseAPI}
 */
export class ProdutosApi extends BaseAPI {
    /**
     * 
     * @summary Atualizar um produto existente
     * @param {number} id 
     * @param {ProdutoDTO} produtoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutosApi
     */
    public atualizar3(id: number, produtoDTO: ProdutoDTO, options?: RawAxiosRequestConfig) {
        return ProdutosApiFp(this.configuration).atualizar3(id, produtoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar produto por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutosApi
     */
    public buscarPorId5(id: number, options?: RawAxiosRequestConfig) {
        return ProdutosApiFp(this.configuration).buscarPorId5(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Criar um novo produto
     * @param {ProdutoDTO} produtoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutosApi
     */
    public criar3(produtoDTO: ProdutoDTO, options?: RawAxiosRequestConfig) {
        return ProdutosApiFp(this.configuration).criar3(produtoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir um produto por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutosApi
     */
    public excluir3(id: number, options?: RawAxiosRequestConfig) {
        return ProdutosApiFp(this.configuration).excluir3(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os produtos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutosApi
     */
    public listarTodos2(options?: RawAxiosRequestConfig) {
        return ProdutosApiFp(this.configuration).listarTodos2(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Criar um novo role
         * @param {RoleDTO} roleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (roleDTO: RoleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleDTO' is not null or undefined
            assertParamExists('create2', 'roleDTO', roleDTO)
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir um role por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete2', 'id', id)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar role por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById2', 'id', id)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Atualizar um role existente
         * @param {number} id 
         * @param {RoleDTO} roleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (id: number, roleDTO: RoleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update2', 'id', id)
            // verify required parameter 'roleDTO' is not null or undefined
            assertParamExists('update2', 'roleDTO', roleDTO)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Criar um novo role
         * @param {RoleDTO} roleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(roleDTO: RoleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create2(roleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.create2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir um role por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.delete2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.findAll2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar role por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.findById2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Atualizar um role existente
         * @param {number} id 
         * @param {RoleDTO} roleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(id: number, roleDTO: RoleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(id, roleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.update2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Criar um novo role
         * @param {RoleDTO} roleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(roleDTO: RoleDTO, options?: RawAxiosRequestConfig): AxiosPromise<RoleDTO> {
            return localVarFp.create2(roleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir um role por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll2(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleDTO>> {
            return localVarFp.findAll2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar role por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById2(id: number, options?: RawAxiosRequestConfig): AxiosPromise<RoleDTO> {
            return localVarFp.findById2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Atualizar um role existente
         * @param {number} id 
         * @param {RoleDTO} roleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(id: number, roleDTO: RoleDTO, options?: RawAxiosRequestConfig): AxiosPromise<RoleDTO> {
            return localVarFp.update2(id, roleDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 
     * @summary Criar um novo role
     * @param {RoleDTO} roleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public create2(roleDTO: RoleDTO, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).create2(roleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir um role por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public delete2(id: number, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).delete2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public findAll2(options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).findAll2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar role por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public findById2(id: number, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).findById2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Atualizar um role existente
     * @param {number} id 
     * @param {RoleDTO} roleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public update2(id: number, roleDTO: RoleDTO, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).update2(id, roleDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServiosApi - axios parameter creator
 * @export
 */
export const ServiosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Criar um novo serviço
         * @param {ServicoDTO} servicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (servicoDTO: ServicoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicoDTO' is not null or undefined
            assertParamExists('create1', 'servicoDTO', servicoDTO)
            const localVarPath = `/api/servicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Excluir um serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete1', 'id', id)
            const localVarPath = `/api/servicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os serviços
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/servicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById1', 'id', id)
            const localVarPath = `/api/servicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Atualizar um serviço existente
         * @param {number} id 
         * @param {ServicoDTO} servicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (id: number, servicoDTO: ServicoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update1', 'id', id)
            // verify required parameter 'servicoDTO' is not null or undefined
            assertParamExists('update1', 'servicoDTO', servicoDTO)
            const localVarPath = `/api/servicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiosApi - functional programming interface
 * @export
 */
export const ServiosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Criar um novo serviço
         * @param {ServicoDTO} servicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(servicoDTO: ServicoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(servicoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiosApi.create1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Excluir um serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiosApi.delete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os serviços
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiosApi.findAll1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiosApi.findById1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Atualizar um serviço existente
         * @param {number} id 
         * @param {ServicoDTO} servicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(id: number, servicoDTO: ServicoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(id, servicoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiosApi.update1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServiosApi - factory interface
 * @export
 */
export const ServiosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiosApiFp(configuration)
    return {
        /**
         * 
         * @summary Criar um novo serviço
         * @param {ServicoDTO} servicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(servicoDTO: ServicoDTO, options?: RawAxiosRequestConfig): AxiosPromise<ServicoDTO> {
            return localVarFp.create1(servicoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Excluir um serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os serviços
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll1(options?: RawAxiosRequestConfig): AxiosPromise<Array<ServicoDTO>> {
            return localVarFp.findAll1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar serviço por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ServicoDTO> {
            return localVarFp.findById1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Atualizar um serviço existente
         * @param {number} id 
         * @param {ServicoDTO} servicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(id: number, servicoDTO: ServicoDTO, options?: RawAxiosRequestConfig): AxiosPromise<ServicoDTO> {
            return localVarFp.update1(id, servicoDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiosApi - object-oriented interface
 * @export
 * @class ServiosApi
 * @extends {BaseAPI}
 */
export class ServiosApi extends BaseAPI {
    /**
     * 
     * @summary Criar um novo serviço
     * @param {ServicoDTO} servicoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiosApi
     */
    public create1(servicoDTO: ServicoDTO, options?: RawAxiosRequestConfig) {
        return ServiosApiFp(this.configuration).create1(servicoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Excluir um serviço por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiosApi
     */
    public delete1(id: number, options?: RawAxiosRequestConfig) {
        return ServiosApiFp(this.configuration).delete1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os serviços
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiosApi
     */
    public findAll1(options?: RawAxiosRequestConfig) {
        return ServiosApiFp(this.configuration).findAll1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar serviço por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiosApi
     */
    public findById1(id: number, options?: RawAxiosRequestConfig) {
        return ServiosApiFp(this.configuration).findById1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Atualizar um serviço existente
     * @param {number} id 
     * @param {ServicoDTO} servicoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiosApi
     */
    public update1(id: number, servicoDTO: ServicoDTO, options?: RawAxiosRequestConfig) {
        return ServiosApiFp(this.configuration).update1(id, servicoDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TcnicosApi - axios parameter creator
 * @export
 */
export const TcnicosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Excluir um técnico por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/tecnicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Criar um novo técnico
         * @param {TecnicoDTO} tecnicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (tecnicoDTO: TecnicoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tecnicoDTO' is not null or undefined
            assertParamExists('create', 'tecnicoDTO', tecnicoDTO)
            const localVarPath = `/api/tecnicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tecnicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar todos os técnicos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tecnicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buscar técnico por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById', 'id', id)
            const localVarPath = `/api/tecnicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Atualizar um técnico existente
         * @param {number} id 
         * @param {TecnicoDTO} tecnicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: number, tecnicoDTO: TecnicoDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'tecnicoDTO' is not null or undefined
            assertParamExists('update', 'tecnicoDTO', tecnicoDTO)
            const localVarPath = `/api/tecnicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tecnicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TcnicosApi - functional programming interface
 * @export
 */
export const TcnicosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TcnicosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Excluir um técnico por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TcnicosApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Criar um novo técnico
         * @param {TecnicoDTO} tecnicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(tecnicoDTO: TecnicoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TecnicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(tecnicoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TcnicosApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Listar todos os técnicos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TecnicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TcnicosApi.findAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Buscar técnico por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TecnicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TcnicosApi.findById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Atualizar um técnico existente
         * @param {number} id 
         * @param {TecnicoDTO} tecnicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: number, tecnicoDTO: TecnicoDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TecnicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, tecnicoDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TcnicosApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TcnicosApi - factory interface
 * @export
 */
export const TcnicosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TcnicosApiFp(configuration)
    return {
        /**
         * 
         * @summary Excluir um técnico por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Criar um novo técnico
         * @param {TecnicoDTO} tecnicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(tecnicoDTO: TecnicoDTO, options?: RawAxiosRequestConfig): AxiosPromise<TecnicoDTO> {
            return localVarFp.create(tecnicoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar todos os técnicos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<TecnicoDTO>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buscar técnico por ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<TecnicoDTO> {
            return localVarFp.findById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Atualizar um técnico existente
         * @param {number} id 
         * @param {TecnicoDTO} tecnicoDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: number, tecnicoDTO: TecnicoDTO, options?: RawAxiosRequestConfig): AxiosPromise<TecnicoDTO> {
            return localVarFp.update(id, tecnicoDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TcnicosApi - object-oriented interface
 * @export
 * @class TcnicosApi
 * @extends {BaseAPI}
 */
export class TcnicosApi extends BaseAPI {
    /**
     * 
     * @summary Excluir um técnico por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TcnicosApi
     */
    public _delete(id: number, options?: RawAxiosRequestConfig) {
        return TcnicosApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Criar um novo técnico
     * @param {TecnicoDTO} tecnicoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TcnicosApi
     */
    public create(tecnicoDTO: TecnicoDTO, options?: RawAxiosRequestConfig) {
        return TcnicosApiFp(this.configuration).create(tecnicoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar todos os técnicos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TcnicosApi
     */
    public findAll(options?: RawAxiosRequestConfig) {
        return TcnicosApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buscar técnico por ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TcnicosApi
     */
    public findById(id: number, options?: RawAxiosRequestConfig) {
        return TcnicosApiFp(this.configuration).findById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Atualizar um técnico existente
     * @param {number} id 
     * @param {TecnicoDTO} tecnicoDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TcnicosApi
     */
    public update(id: number, tecnicoDTO: TecnicoDTO, options?: RawAxiosRequestConfig) {
        return TcnicosApiFp(this.configuration).update(id, tecnicoDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



